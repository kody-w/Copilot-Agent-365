{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "functionAppName": {
      "type": "string",
      "defaultValue": "[concat('copilot365-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Function App (must be globally unique)"
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('st', uniqueString(resourceGroup().id))]",
      "maxLength": 24,
      "metadata": {
        "description": "Storage Account Name (3-24 characters, lowercase and numbers only)"
      }
    },
    "openAIApiKey": {
      "type": "securestring",
      "metadata": {
        "description": "Your Azure OpenAI API Key"
      }
    },
    "openAIEndpoint": {
      "type": "string",
      "metadata": {
        "description": "Your Azure OpenAI Endpoint (e.g., https://your-resource.openai.azure.com/)"
      }
    },
    "openAIApiVersion": {
      "type": "string",
      "defaultValue": "2024-02-01",
      "metadata": {
        "description": "Azure OpenAI API Version"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "eastus",
        "eastus2",
        "centralus",
        "westus",
        "westus2",
        "westus3",
        "northcentralus",
        "southcentralus",
        "westcentralus",
        "northeurope",
        "westeurope",
        "uksouth",
        "ukwest",
        "francecentral",
        "germanywestcentral",
        "norwayeast",
        "switzerlandnorth",
        "uaenorth",
        "southafricanorth",
        "australiaeast",
        "australiasoutheast",
        "australiacentral",
        "japaneast",
        "japanwest",
        "koreacentral",
        "southeastasia",
        "eastasia",
        "centralindia",
        "southindia",
        "canadacentral",
        "canadaeast",
        "brazilsouth"
      ],
      "metadata": {
        "description": "Location for all resources. Choose a region where you have quota available."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Y1",
      "allowedValues": [
        "Y1",
        "EP1",
        "EP2",
        "EP3"
      ],
      "metadata": {
        "description": "Pricing tier. Y1 = Consumption (Pay-per-use), EP1-3 = Premium (if Y1 quota exceeded)"
      }
    },
    "skuTier": {
      "type": "string",
      "defaultValue": "Dynamic",
      "allowedValues": [
        "Dynamic",
        "ElasticPremium"
      ],
      "metadata": {
        "description": "SKU Tier. Dynamic for Consumption, ElasticPremium for Premium plans"
      }
    }
  },
  "variables": {
    "hostingPlanName": "[concat(parameters('functionAppName'), '-plan')]",
    "applicationInsightsName": "[concat(parameters('functionAppName'), '-insights')]",
    "fileShareName": "azfbusinessbot3c92ab",
    "functionAppId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
    "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
    "applicationInsightsLocation": "[if(contains(createArray('germanywestcentral', 'norwayeast', 'switzerlandnorth', 'uaenorth'), parameters('location')), 'westeurope', parameters('location'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2022-09-01",
      "name": "[concat(parameters('storageAccountName'), '/default')]",
      "dependsOn": [
        "[variables('storageAccountId')]"
      ],
      "properties": {}
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2022-09-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', variables('fileShareName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), 'default')]"
      ],
      "properties": {
        "shareQuota": 5120,
        "enabledProtocols": "SMB"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[variables('applicationInsightsLocation')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('skuName')]",
        "tier": "[parameters('skuTier')]",
        "size": "[parameters('skuName')]",
        "family": "[if(equals(parameters('skuTier'), 'Dynamic'), 'Y', 'EP')]",
        "capacity": 0
      },
      "kind": "functionapp",
      "properties": {
        "perSiteScaling": false,
        "elasticScaleEnabled": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0,
        "zoneRedundant": false
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[parameters('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp,linux",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[variables('storageAccountId')]",
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "numberOfWorkers": 1,
          "linuxFxVersion": "python|3.11",
          "acrUseManagedIdentityCreds": false,
          "alwaysOn": false,
          "http20Enabled": false,
          "functionAppScaleLimit": 200,
          "minimumElasticInstanceCount": 0,
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(variables('storageAccountId'), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(variables('storageAccountId'), '2022-09-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(parameters('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).ConnectionString]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "python"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~14"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "0"
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "true"
            },
            {
              "name": "ENABLE_ORYX_BUILD",
              "value": "true"
            },
            {
              "name": "AZURE_OPENAI_API_KEY",
              "value": "[parameters('openAIApiKey')]"
            },
            {
              "name": "AZURE_OPENAI_ENDPOINT",
              "value": "[parameters('openAIEndpoint')]"
            },
            {
              "name": "AZURE_OPENAI_API_VERSION",
              "value": "[parameters('openAIApiVersion')]"
            },
            {
              "name": "AZURE_FILES_SHARE_NAME",
              "value": "[variables('fileShareName')]"
            },
            {
              "name": "ASSISTANT_NAME",
              "value": "Copilot Agent 365"
            },
            {
              "name": "CHARACTERISTIC_DESCRIPTION",
              "value": "Enterprise AI assistant integrated with Microsoft 365"
            }
          ],
          "ftpsState": "FtpsOnly",
          "minTlsVersion": "1.2",
          "scmMinTlsVersion": "1.2",
          "cors": {
            "allowedOrigins": ["*"],
            "supportCredentials": true
          },
          "use32BitWorkerProcess": false,
          "webSocketsEnabled": false,
          "managedPipelineMode": "Integrated",
          "virtualApplications": [
            {
              "virtualPath": "/",
              "physicalPath": "site\\wwwroot",
              "preloadEnabled": false
            }
          ],
          "loadBalancing": "LeastRequests",
          "experiments": {
            "rampUpRules": []
          },
          "autoHealEnabled": false,
          "vnetRouteAllEnabled": false,
          "vnetPrivatePortsCount": 0,
          "publicNetworkAccess": "Enabled",
          "httpLoggingEnabled": false,
          "detailedErrorLoggingEnabled": false,
          "scmType": "None",
          "remoteDebuggingEnabled": false,
          "remoteDebuggingVersion": "VS2019"
        },
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": false,
        "clientCertEnabled": false,
        "clientCertMode": "Required",
        "hostNamesDisabled": false,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None",
        "publicNetworkAccess": "Enabled",
        "storageAccountRequired": false,
        "keyVaultReferenceIdentity": "SystemAssigned"
      }
    }
  ],
  "outputs": {
    "functionAppName": {
      "type": "string",
      "value": "[parameters('functionAppName')]"
    },
    "functionAppUrl": {
      "type": "string",
      "value": "[concat('https://', reference(variables('functionAppId')).defaultHostName)]"
    },
    "functionEndpoint": {
      "type": "string",
      "value": "[concat('https://', reference(variables('functionAppId')).defaultHostName, '/api/businessinsightbot_function')]"
    },
    "deploymentInstructions": {
      "type": "string",
      "value": "IMPORTANT: You must now deploy your code! Use one of these methods: 1) ZIP Deploy: Create a zip of azure-function-app folder and deploy using Azure CLI, 2) VS Code: Install Azure Functions extension and deploy, 3) GitHub Actions: Set up CI/CD. Get your function key from: Function App > Functions > businessinsightbot_function > Function Keys"
    },
    "selectedRegion": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "selectedSku": {
      "type": "string",
      "value": "[concat(parameters('skuName'), ' - ', parameters('skuTier'))]"
    }
  }
}